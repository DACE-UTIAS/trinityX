#!/usr/bin/env python3

import os
import re
import subprocess
import sys
import urllib
import requests
from datetime import datetime
from os.path import expanduser


sandbox      = 'sandbox'
sshd_config  = '/etc/ssh/sshd_config'
auth_key     = '/.ssh/authorized_keys'
pub_files    = ['/.ssh/id_dsa.pub', '/.ssh/id_rsa.pub', '/.ssh/identity.pub', '/.ssh/id_rsa-CV.pub']
pub          = ''
getpubcert   = 1
ok_chars     = 'a-zA-Z0-9 _,-.+#='
no_questions = 0
version      = '1.1'

# ---------------------------------------------------------------------------------------------------------

def shell(cmd):
    with open(os.devnull) as DEVNULL:
        try:
            return subprocess.check_output(cmd, stderr = DEVNULL, shell = True).strip()
        except subprocess.CalledProcessError:
            return ''

def shell_exit_status(cmd):
    with open(os.devnull) as DEVNULL:
        return subprocess.call(cmd, stdout = DEVNULL, stderr = DEVNULL, shell = True)

def confirm(msg, default):
    answer = ''
    if (no_questions):
        return 1

    while True:
        sys.stdout.write(msg + ' ')
        if re.search('y', default, re.IGNORECASE):
            sys.stdout.write('[Y/n] ')
        else:
            sys.stdout.write('[y/N] ')
        sys.stdout.flush()
        answer = sys.stdin.readline().strip()
        if re.search('^y|^n', answer, re.IGNORECASE) or answer == '':
            break

    if answer == '':
        answer = default

    if re.search('^y', answer, re.IGNORECASE):
        return 1
    return 0

# ---------------------------------------------------------------------------------------------------------

# remove first element as it is the script name itself
del sys.argv[0]

while sys.argv:
    arg = sys.argv.pop()
    if (arg == '--confirm') or (arg == '-c'):
        no_questions=1
    elif (len(arg) > 1):
        sandbox = arg.split('.',1)[0]

hostname = shell('hostname -f')
if hostname == '':
    hostname = shell('hostname -f')
    hostname += '.NOFQDN'

remote_url = 'http://{}/~remote/'.format(sandbox)

try:
    tridsitefile = open('/trinity/site', 'r')
    Lines = tridsitefile.readlines()
    trid = Lines[0].rstrip('\n')
except FileNotFoundError as e:
    trid = 'UNKNOWN'
if not re.search('^\d+$', trid):
    trid = 'UNKNOWN'
certificatesubject = 'T=Trinity,_C=No_certificate_provided'

# ------------------------------- we ask to comply to our terms and conditions ----------------------------

print ('\nRequest Remote Assistance v'+version+'\n')
print ('--------------------------------------------------------------------------------------------------------------------------------------')
print ('Please note that by using Remote Assistance you agree with ClusterVision\'s terms and conditions.')
print ('The terms and conditions can be found here: https://clustervision.com/wp-content/uploads/2020/11/Terms-and-Conditions-2020v1-pub.pdf')
print ('--------------------------------------------------------------------------------------------------------------------------------------\n')
print ('The Remote Assistance utility helps securely set up a temporary SSH tunnel to: ' + sandbox + '\n')
if not confirm('Do you agree with the terms and conditions and allow a ClusterVision engineer SSH access to the cluster?', 'n'):
    sys.exit(0)

# ---------------------------------------------------------------------------------------------------------

if int(shell('id -u')) != 0:
    print('\nWarning: this script should be executed as root.')
    if not confirm('Would you prefer to continue as current user?','n'):
        sys.exit(1)

current_home=expanduser("~")
if (current_home == ""):
    print ('\nError: Cannot figure out my home directory')
    sys.exit(1)
auth_key=current_home+auth_key

r1 = shell(""" grep "^RSAAuthentication" /etc/ssh/sshd_config | awk '{print $2}' """)
r2 = shell(""" grep "^PubkeyAuthentication" /etc/ssh/sshd_config | awk '{print $2}' """)
if (r1 != '' and r1 == 'no') or (r2 != '' and r2 == 'no'):
    print('\nWarning: PubkeyAuthentication and/or RSAAuthentication disabled in sshd config.')
    print('Note: support will not be able to login automatically, you will need to supply')
    print('      the root password when contacted by support.\n')
    if not confirm('Continue?', 'n'):
        sys.exit(0)
    getpubcert = 0

pub_file = ''
for f in pub_files:
    f=current_home+f
    if os.access(f, os.R_OK):
        pub_file = f
        break
if not pub_file:
    print('\nNote: No SSH public keys found. Generating one...')
    shell(""" timeout 20 -k5 yes y|ssh-keygen -t rsa -b 4096 -N '' -f /{}/.ssh/id_rsa-CV """.format(current_home))
    pub_file=current_home+"/.ssh/id_rsa-CV.pub"
    if not os.access(pub_file, os.R_OK):
        print('Error: Generating SSH key failed.')
        sys.exit(0)
#    pub_files.append(pub_file)
with open(pub_file, 'r') as f:
    pub = f.read()

# we split off the .pub to get the private key file name
priv_file=pub_file.rsplit('.',1)[0]

freetext = ''
info = ''

info = '_'.join(info.split(' '))

# Testing the Internet connection.
if shell_exit_status('ping -w5 -c1 {}.clustervision.com'.format(sandbox)) != 0:
    print('Error: Unable to ping: ' + sandbox + '.clustervision.com')
    print('Please check your internet connection.')
    if not confirm('Continue?', 'n'):
        sys.exit(0)

req = "https://static.clustervision.com/support.pub"
try:
    #readable_trid=str(trid.decode("utf-8"))
    readable_trid=str(trid)
    now = datetime.now()
    logfile_name = 'tunnel--TrinityID-' + readable_trid + '--' + now.strftime("%m-%d-%Y_%H-%M-%S") + ".log"
    with urllib.request.urlopen(req) as response:
        sandboxpub = response.read().decode()
    if getpubcert:
        shell("""touch {}""".format(auth_key))
        shell("""cp -f {} {}.bak""".format(auth_key, auth_key))
        shell("""echo '{}' >> {}""".format(sandboxpub, auth_key))
        shell("""chmod 640 {}""".format(auth_key))
        print('\nAdded temporary ClusterVision public key.')
    data = dict(pub=pub,info=info,trid=trid)
    r = requests.post('https://sandbox.clustervision.com/cgi-bin/keys.py',data=data, auth=('trinityx','trinityx'))
    try:
        remoteport = int(r.content)
    except:
        print(r.content)
        print('No port assignment could be made')
        sys.exit(1)
    print('TrinityID: '+ readable_trid +', Remote port: '+str(remoteport))
    subprocess.call('ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {} -t -R :{}:localhost:22 sandbox@{}.clustervision.com | tee tunnel.log'.format(priv_file,remoteport,sandbox),shell=True)
    subprocess.call('setterm -cursor on', shell=True)
    print('\nCleaning up..\n')
    # ------ copy the log file ------- Won't work as we cannot copy files accross
    #shell("""scp -v -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {} -P {} tunnel.log sandbox@{}.clustervision.com:{}""".format(priv_file,remoteport,sandbox,logfile_name))
    # --------------------------------
    shell("""cp -f {}.bak {}""".format(auth_key, auth_key))
    print('Tunnel to {} terminated.'.format(sandbox))
except urllib.error.URLError as e:
    print('\nError: could not complete communication with {} .').format(remote_url)
    print('Reason: {} .').format(e.reason)
except urllib.error.HTTPError as e:
    print('\nError: {} could not fulfill the request.').format(remote_url)
    print('Reason: {} {} .').format(e.code, e.read())

sys.exit(0)
