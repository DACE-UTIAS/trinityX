---
# tasks file for luna 

- name: Install luna2 packages
  yum:
    name: '{{ luna2_packages }}'
    state: present
    enablerepo: luna2

- name: Install required packages
  yum:
    name: '{{ required_packages }}'
    state: present

- name: Ensure /var/log/luna exists
  file:
    path: '/var/log/luna'
    state: directory

# ----------------- stop if we exist -----------------

- name: Populate service facts
  service_facts:

- name: Start luna services
  service:
    name: luna2-daemon
    state: stopped
  when: ansible_facts.services['luna2-daemon.service'] is defined

# ----------------------------------------------------

- name: Get python libdir
  shell: "echo /trinity/local/python/lib/python*"
  register: luna2_python_dir
  changed_when: False

# TODO: better way than below
- name: Install luna2 daemon
  ansible.builtin.shell: |
    source /trinity/local/python/bin/activate
    pip3 install {{ luna2_noarch_pip_repository }}/daemon/{{ luna2_daemon_pip }}
    exit $?
  args:
    executable: /bin/bash

- name: create symlink from site-packages/daemon to luna2 dir
  file:
    src: '{{ luna2_python_dir.stdout }}/site-packages/daemon'
    dest: '{{ trix_luna }}/daemon'
    state: link
    force: yes

# TODO: better way than below
- name: Install luna2 cli
  ansible.builtin.shell: |
    source /trinity/local/python/bin/activate
    pip3 install {{ luna2_noarch_pip_repository }}/cli/{{ luna2_cli_pip }}
    exit $?
  args:
    executable: /bin/bash

#TODO better way than below
- name: create symlink from site-packages/cli to luna2 dir
  file:
    src: '{{ luna2_python_dir.stdout }}/site-packages/luna'
    dest: '{{ trix_luna }}/cli'
    state: link
    force: yes

# ------------------- luna.ini ---------------------

- name: Generate Luna Secret Key
  set_fact:
    luna_secret_key: "{{ lookup('password', '/dev/null length=32 chars=abcdef0123456789') }}"

- name: configure secret key for daemon API
  ansible.builtin.lineinfile:
    path: '{{ trix_luna }}/daemon/config/luna.ini'
    regexp: '^SECRET_KEY\s*='
    line: "SECRET_KEY = {{ luna_secret_key }}"

- name: configure luna username for daemon API
  ansible.builtin.lineinfile:
    path: '{{ trix_luna }}/daemon/config/luna.ini'
    regexp: '^USERNAME\s*='
    line: "USERNAME = {{ luna_username }}"

- name: configure luna password for daemon API
  ansible.builtin.lineinfile:
    path: '{{ trix_luna }}/daemon/config/luna.ini'
    regexp: '^PASSWORD\s*='
    line: "PASSWORD = {{ luna_password }}"

- name: Ensuring luna ini file is unix
  shell: "dos2unix {{ trix_luna }}/daemon/config/luna.ini"

- name: Change file permissions of daemon luna ini file
  ansible.builtin.file:
    path: '{{ trix_luna }}/daemon/config/luna.ini'
    owner: root
    group: root
    mode: '0640'

- name: verify if cli config file exists
  stat: 
    path: '{{ trix_luna }}/cli/config/luna.ini'
  register: cli_config_file

- block:
  - name: configure secret key for cli API
    ansible.builtin.lineinfile:
      path: '{{ trix_luna }}/cli/config/luna.ini'
      regexp: '^SECRET_KEY\s*='
      line: "SECRET_KEY = {{ luna_secret_key }}"

  - name: configure luna username for cli API
    ansible.builtin.lineinfile:
      path: '{{ trix_luna }}/cli/config/luna.ini'
      regexp: '^USERNAME\s*='
      line: "USERNAME = {{ luna_username }}"

  - name: configure luna password for cli API
    ansible.builtin.lineinfile:
      path: '{{ trix_luna }}/cli/config/luna.ini'
      regexp: '^PASSWORD\s*='
      line: "PASSWORD = {{ luna_password }}"

  - name: Ensuring luna ini file is unix
    shell: "dos2unix {{ trix_luna }}/cli/config/luna.ini"

  - name: Change file permissions of cli luna ini file
    ansible.builtin.file:
      path: '{{ trix_luna }}/cli/config/luna.ini'
      owner: root
      group: root
      mode: '0640'

  when: cli_config_file.stat.exists

# ----------------------------------------------------

- name: Create luna.key
  copy:
    dest: "{{ trix_ssl }}/luna.key"
    content: "{{ luna2_key }}"

- debug:
    msg: "{{ luna2_cluster }}"

- name: Render /trinity/local/luna//daemon/config/bootstrap.ini
  template:
    src: 'luna2.conf.j2'
    dest: '/trinity/local/luna/daemon/config/bootstrap.ini'
    owner: root
    group: root
    mode: 0644
  notify: restart luna2-daemon

# ----------------------------------------------------

- name: Render /usr/bin/luna
  template:
    src: 'luna2-cli-wrapper.j2'
    dest: '/usr/bin/luna'
    owner: root
    group: root
    mode: 0755

- name: Copy tftp configuration to /etc/xinetd.d
  copy:
    src: 'tftp'
    dest: '/etc/xinetd.d/tftp'
  notify: restart xinetd

- name: Ensure /tftpboot exists
  file:
    path: '/tftpboot'
    state: directory

- name: Download iPXE EFI image to /tftpboot
  get_url:
    url: http://boot.ipxe.org/ipxe.efi
    dest: /tftpboot/luna_ipxe.efi
    mode: '0444'

- name: Download iPXE legacy image to /tftpboot
  get_url:
    url: http://boot.ipxe.org/undionly.kpxe
    dest: /tftpboot/luna_undionly.kpxe
    mode: '0444'

- name: Render /etc/systemd/system/luna2-daemon.service
  template:
    src: 'luna2-daemon-service.j2'
    dest: '/etc/systemd/system/luna2-daemon.service'
    owner: root
    group: root
    mode: 0644

- name: Include luna's DNS zone file in named conf
  lineinfile:
    path: '/etc/named.conf'
    line: 'include "{{ luna2_named_include_file }}";'
  notify: restart named

- name: Add luna's server configuration to nginx
  template:
    src: 'nginx-luna2.conf.j2'
    dest: '/etc/nginx/conf.d/nginx-luna2.conf'
  notify: reload nginx


## Some PXE ROMs in some NICs do not send tftp replies using the FIP
## of the controllers. This workaround ensures that we SNAT those replies.
## TODO: delete workaround when no longer required.
#- name: Get provisioning interface name
#  shell: "ip -o addr show to {{ trix_cluster_net }}/{{ trix_cluster_netprefix }} | awk '{ print $2 }' | head -1"
#  register: luna_prov_nic
#  changed_when: False

# TODO
#- name: Workaround PXE boot issue when doing HA and masquerading is enabled
#  template:
#    src: 'firewalld_direct.xml.j2'
#    dest: '/etc/firewalld/direct.xml'
#    owner: 'root'
#    group: 'root'
#    mode: '0644'
#  when: ha|default(False)
#  notify: reload firewalld
###

- name: Selinux fcontext on files
  sefcontext:
    target: "/etc/named.luna.zones"
    setype: named_zone_t

- name: Check File exists or not
  stat:
    path: '/etc/named.luna.zones'
  register: luna_dns_placeholder

- name: Add a placeholder for luna's DNS zone file
  file:
    path: '/etc/named.luna.zones'
    setype: named_zone_t
    group: named
    state: touch
  when: luna_dns_placeholder.stat.exists == false

- name: Enable luna services
  service:
    name: '{{ item }}'
    enabled: yes
#  when: not ha
  with_items:
    - xinetd
    - dhcpd
    - luna2-daemon

- name: Start luna services
  service:
    name: '{{ item }}'
    state: started
  with_items:
    - xinetd
    - luna2-daemon

